// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["ShowRecordFields"] = ShowRecordFields;
  exports["showRecordFields"] = showRecordFields;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["EqRecord"] = EqRecord;
  exports["eqRecord"] = eqRecord;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var OrdRecord = function (EqRecord0, compareRecord) {
      this.EqRecord0 = EqRecord0;
      this.compareRecord = compareRecord;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordRecordNil = new OrdRecord(function () {
      return Data_Eq.eqRowNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return Data_Ordering.EQ.value;
          };
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return new Ord(function () {
              return Data_Eq.eqRec(dictRowToList)(dictOrdRecord.EqRecord0());
          }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 128, column 3 - line 131, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 119, column 3 - line 122, column 12: " + [ v.constructor.name ]);
          };
      };
  }; 
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return new OrdRecord(function () {
                      return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())(dictCons)(dictIsSymbol)(dictOrd.Eq0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                              var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                              if ($49) {
                                  return left;
                              };
                              return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                          };
                      };
                  });
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["min"] = min;
  exports["max"] = max;
  exports["abs"] = abs;
  exports["OrdRecord"] = OrdRecord;
  exports["compareRecord"] = compareRecord;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["applicativeFn"] = applicativeFn;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];                 
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Unit = PS["Data.Unit"];                 
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 205, column 1 - line 205, column 47: " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 217, column 1 - line 217, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 268, column 1 - line 268, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 125, column 1 - line 125, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($78) {
                      return wrap(dictNewtype1)(f(unwrap(dictNewtype)($78)));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["over"] = over;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($116) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 389, column 3 - line 389, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["intercalate"] = intercalate;
  exports["sum"] = sum;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });                                                                                                     
  var fromRight = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar71) {
                  return $dollar71;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 261, column 1 - line 261, column 52: " + [ v.constructor.name ]);
          })());
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["fromRight"] = fromRight;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];                 
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadAskExceptT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadExceptT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadTellExceptT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadExceptT(dictMonadTell.Monad0());
      }, function ($101) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($101));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 86, column 9 - line 88, column 49: " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 82, column 5 - line 88, column 49: " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return applicativeExceptT(dictMonad);
          }, function () {
              return plusExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadAskExceptT"] = monadAskExceptT;
  exports["monadTellExceptT"] = monadTellExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  }; 
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor(function ($69) {
          return mapReaderT(Data_Functor.map(dictFunctor)($69));
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, function ($71) {
          return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($71)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.run = function (f) {
    return f();
  };

  exports["while"] = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["run"] = $foreign.run;
  exports["while"] = $foreign["while"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadAskStateT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadStateT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  var monadTellStateT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadStateT(dictMonadTell.Monad0());
      }, function ($112) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($112));
      });
  };
  var monadThrowStateT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadStateT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictAlt.Functor0());
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                  };
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus.Alt0());
          }, function (v) {
              return Control_Plus.empty(dictPlus);
          });
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeStateT(dictMonad);
          }, function () {
              return plusStateT(dictMonad)(dictAlternative.Plus1());
          });
      };
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadThrowStateT"] = monadThrowStateT;
  exports["monadAskStateT"] = monadAskStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadTellStateT"] = monadTellStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };          
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              });
          };
      });
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadAskWriterT = function (dictMonoid) {
      return function (dictMonadAsk) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
          }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function ($124) {
              return WriterT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Tuple.Tuple.create(Data_Unit.unit)($124)));
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["runWriterT"] = runWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadAskWriterT"] = monadAskWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                             

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unsafeFreeze = function ($12) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)($12);
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["empty"] = $foreign.empty;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];                 
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.read(v.value1))(function (v1) {
          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v.value0(v1));
      });
  };
  var next = function (v) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.read(v.value1))(function (v1) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.modify(function (v2) {
              return v2 + 1 | 0;
          })(v.value1))(function (v2) {
              return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v.value0(v1));
          });
      });
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal["new"](false))(function (v) {
                  return Control_Monad_ST_Internal["while"](Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v)))(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(peek(iter))(function (v1) {
                      if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.push(v1.value0)(array))(function (v2) {
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter));
                          });
                      };
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v));
                  }));
              });
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal["new"](false))(function (v) {
              return Control_Monad_ST_Internal["while"](Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v)))(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(next(iter))(function (v1) {
                  if (v1 instanceof Data_Maybe.Just) {
                      return f(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v));
                  };
                  throw new Error("Failed pattern match at Data.Array.ST.Iterator line 42, column 5 - line 44, column 47: " + [ v1.constructor.name ]);
              }));
          });
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["pushWhile"] = pushWhile;
})(PS["Data.Array.ST.Iterator"] = PS["Data.Array.ST.Iterator"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeEnd = function (n) {
      return function (xs) {
          return $foreign.drop($foreign.length(xs) - n | 0)(xs);
      };
  }; 
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 702, column 15 - line 707, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterator(function (v1) {
                  return index(xs)(v1);
              }))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterate(v1)(function (x) {
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v2) {
                          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.push(x)(v2))(function (v3) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2))(function () {
                                  return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v2))(function (v4) {
                                      return Data_Array_ST.push(v4)(v);
                                  });
                              });
                          });
                      }));
                  }))(function () {
                      return Data_Array_ST.unsafeFreeze(v);
                  });
              });
          }));
      };
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($113) {
          return group(dictOrd.Eq0())(sort(dictOrd)($113));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["concatMap"] = concatMap;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["takeEnd"] = takeEnd;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];         
  var toArray = Unsafe_Coerce.unsafeCoerce;  
  var adaptAny = function (f) {
      return function ($54) {
          return f(toArray($54));
      };
  };
  var index = adaptAny(Data_Array.index);
  var length = adaptAny(Data_Array.length);
  exports["toArray"] = toArray;
  exports["length"] = length;
  exports["index"] = index;
})(PS["Data.Array.NonEmpty"] = PS["Data.Array.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 158, column 33 - line 160, column 62: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
    "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqYear = Data_Eq.eqInt;
  var eqMonth = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return true;
          };
          if (x instanceof February && y instanceof February) {
              return true;
          };
          if (x instanceof March && y instanceof March) {
              return true;
          };
          if (x instanceof April && y instanceof April) {
              return true;
          };
          if (x instanceof May && y instanceof May) {
              return true;
          };
          if (x instanceof June && y instanceof June) {
              return true;
          };
          if (x instanceof July && y instanceof July) {
              return true;
          };
          if (x instanceof August && y instanceof August) {
              return true;
          };
          if (x instanceof September && y instanceof September) {
              return true;
          };
          if (x instanceof October && y instanceof October) {
              return true;
          };
          if (x instanceof November && y instanceof November) {
              return true;
          };
          if (x instanceof December && y instanceof December) {
              return true;
          };
          return false;
      };
  });
  var ordMonth = new Data_Ord.Ord(function () {
      return eqMonth;
  }, function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof January) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof January) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof February && y instanceof February) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof February) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof February) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof March && y instanceof March) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof March) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof March) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof April && y instanceof April) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof April) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof April) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof May && y instanceof May) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof May) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof May) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof June && y instanceof June) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof June) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof June) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof July && y instanceof July) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof July) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof July) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof August && y instanceof August) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof August) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof August) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof September && y instanceof September) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof September) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof September) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof October && y instanceof October) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof October) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof October) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof November && y instanceof November) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof November) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof November) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof December && y instanceof December) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component line 61, column 8 - line 61, column 38: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqDay = Data_Eq.eqInt;
  var boundedYear = new Data_Bounded.Bounded(function () {
      return ordYear;
  }, -271820 | 0, 275759);       
  var boundedMonth = new Data_Bounded.Bounded(function () {
      return ordMonth;
  }, January.value, December.value);
  var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
      return boundedYear;
  }, function () {
      return enumYear;
  }, 547580, function (v) {
      return v;
  }, function (n) {
      if (n >= (-271821 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 35, column 1 - line 35, column 45: " + [ n.constructor.name ]);
  });
  var enumYear = new Data_Enum.Enum(function () {
      return ordYear;
  }, function ($46) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($46)));
  }, function ($47) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($47)));
  });
  var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
      return boundedMonth;
  }, function () {
      return enumMonth;
  }, 12, function (v) {
      if (v instanceof January) {
          return 1;
      };
      if (v instanceof February) {
          return 2;
      };
      if (v instanceof March) {
          return 3;
      };
      if (v instanceof April) {
          return 4;
      };
      if (v instanceof May) {
          return 5;
      };
      if (v instanceof June) {
          return 6;
      };
      if (v instanceof July) {
          return 7;
      };
      if (v instanceof August) {
          return 8;
      };
      if (v instanceof September) {
          return 9;
      };
      if (v instanceof October) {
          return 10;
      };
      if (v instanceof November) {
          return 11;
      };
      if (v instanceof December) {
          return 12;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 87, column 14 - line 101, column 1: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumMonth = new Data_Enum.Enum(function () {
      return ordMonth;
  }, function ($50) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($50)));
  }, function ($51) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($51)));
  });
  var boundedDay = new Data_Bounded.Bounded(function () {
      return ordDay;
  }, 1, 31);
  var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
      return boundedDay;
  }, function () {
      return enumDay;
  }, 31, function (v) {
      return v;
  }, function (n) {
      if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 133, column 1 - line 133, column 43: " + [ n.constructor.name ]);
  });
  var enumDay = new Data_Enum.Enum(function () {
      return ordDay;
  }, function ($52) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($52)));
  }, function ($53) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($53)));
  });
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["eqYear"] = eqYear;
  exports["ordYear"] = ordYear;
  exports["boundedYear"] = boundedYear;
  exports["enumYear"] = enumYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["eqDay"] = eqDay;
  exports["ordDay"] = ordDay;
  exports["boundedDay"] = boundedDay;
  exports["enumDay"] = enumDay;
  exports["boundedEnumDay"] = boundedEnumDay;
})(PS["Data.Date.Component"] = PS["Data.Date.Component"] || {});
(function(exports) {
    "use strict";

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Minutes = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };          
  var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Minutes);
  var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Milliseconds);
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };  
  var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
      return v * 60000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
      return v / 60000.0;
  }));
  exports["fromDuration"] = fromDuration;
  exports["toDuration"] = toDuration;
  exports["Milliseconds"] = Milliseconds;
  exports["Minutes"] = Minutes;
  exports["Duration"] = Duration;
  exports["newtypeMilliseconds"] = newtypeMilliseconds;
  exports["newtypeMinutes"] = newtypeMinutes;
  exports["durationMinutes"] = durationMinutes;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Date"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var year = function (v) {
      return v.value0;
  }; 
  var month = function (v) {
      return v.value1;
  };
  var eqDate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
      };
  });
  var ordDate = new Data_Ord.Ord(function () {
      return eqDate;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
      };
  });
  var day = function (v) {
      return v.value2;
  };
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  var exactDate = function (y) {
      return function (m) {
          return function (d) {
              var dt = new $$Date(y, m, d);
              var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
              if ($99) {
                  return new Data_Maybe.Just(dt);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  exports["canonicalDate"] = canonicalDate;
  exports["exactDate"] = exactDate;
  exports["year"] = year;
  exports["month"] = month;
  exports["day"] = day;
  exports["eqDate"] = eqDate;
  exports["ordDate"] = ordDate;
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
    "use strict";

  var createUTC = function (y, mo, d, h, m, s, ms) {
    var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date.getTime();
  };

  exports.calcDiff = function (rec1, rec2) {
    var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
    var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
    return msUTC1 - msUTC2;
  };
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var eqSecond = Data_Eq.eqInt;
  var eqMinute = Data_Eq.eqInt;
  var eqMillisecond = Data_Eq.eqInt;
  var eqHour = Data_Eq.eqInt;
  var boundedSecond = new Data_Bounded.Bounded(function () {
      return ordSecond;
  }, 0, 59);
  var boundedMinute = new Data_Bounded.Bounded(function () {
      return ordMinute;
  }, 0, 59);
  var boundedMillisecond = new Data_Bounded.Bounded(function () {
      return ordMillisecond;
  }, 0, 999);
  var boundedHour = new Data_Bounded.Bounded(function () {
      return ordHour;
  }, 0, 23);
  var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
      return boundedSecond;
  }, function () {
      return enumSecond;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 90, column 1 - line 90, column 49: " + [ n.constructor.name ]);
  });
  var enumSecond = new Data_Enum.Enum(function () {
      return ordSecond;
  }, function ($28) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($28)));
  }, function ($29) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($29)));
  });
  var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
      return boundedMinute;
  }, function () {
      return enumMinute;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 61, column 1 - line 61, column 49: " + [ n.constructor.name ]);
  });
  var enumMinute = new Data_Enum.Enum(function () {
      return ordMinute;
  }, function ($30) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($30)));
  }, function ($31) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($31)));
  });
  var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
      return boundedMillisecond;
  }, function () {
      return enumMillisecond;
  }, 1000, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 999) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 120, column 1 - line 120, column 59: " + [ n.constructor.name ]);
  });
  var enumMillisecond = new Data_Enum.Enum(function () {
      return ordMillisecond;
  }, function ($32) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($32)));
  }, function ($33) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($33)));
  });
  var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
      return boundedHour;
  }, function () {
      return enumHour;
  }, 24, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 32, column 1 - line 32, column 45: " + [ n.constructor.name ]);
  });
  var enumHour = new Data_Enum.Enum(function () {
      return ordHour;
  }, function ($34) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($34)));
  }, function ($35) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($35)));
  });
  exports["eqHour"] = eqHour;
  exports["ordHour"] = ordHour;
  exports["boundedHour"] = boundedHour;
  exports["enumHour"] = enumHour;
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["eqMinute"] = eqMinute;
  exports["ordMinute"] = ordMinute;
  exports["boundedMinute"] = boundedMinute;
  exports["enumMinute"] = enumMinute;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["eqSecond"] = eqSecond;
  exports["ordSecond"] = ordSecond;
  exports["boundedSecond"] = boundedSecond;
  exports["enumSecond"] = enumSecond;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["eqMillisecond"] = eqMillisecond;
  exports["ordMillisecond"] = ordMillisecond;
  exports["boundedMillisecond"] = boundedMillisecond;
  exports["enumMillisecond"] = enumMillisecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
})(PS["Data.Time.Component"] = PS["Data.Time.Component"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  var second = function (v) {
      return v.value2;
  };
  var minute = function (v) {
      return v.value1;
  };
  var millisecond = function (v) {
      return v.value3;
  };
  var hour = function (v) {
      return v.value0;
  };
  var eqTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
      };
  });
  var ordTime = new Data_Ord.Ord(function () {
      return eqTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
          if (v2 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v2 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
      };
  });
  exports["Time"] = Time;
  exports["hour"] = hour;
  exports["minute"] = minute;
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["eqTime"] = eqTime;
  exports["ordTime"] = ordTime;
})(PS["Data.Time"] = PS["Data.Time"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.DateTime"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];                 
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var toRecord = function (v) {
      return {
          year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
          month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
          day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
          hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
          minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
          second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
          millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
  };
  var time = function (v) {
      return v.value1;
  };
  var eqDateTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
      };
  });
  var ordDateTime = new Data_Ord.Ord(function () {
      return eqDateTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
      };
  });
  var diff = function (dictDuration) {
      return function (dt1) {
          return function (dt2) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
          };
      };
  };
  exports["DateTime"] = DateTime;
  exports["time"] = time;
  exports["diff"] = diff;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  }; 
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 602, column 1 - line 602, column 40: " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 634, column 1 - line 634, column 35: " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 567, column 18 - line 576, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 566, column 3 - line 566, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var toUnfoldableUnordered = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                      };
                      if (v.value0 instanceof Three) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 588, column 18 - line 593, column 77: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 587, column 3 - line 587, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 197, column 5 - line 197, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 596, column 1 - line 596, column 38: " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 93, column 1 - line 93, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 415, column 3 - line 420, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 412, column 1 - line 412, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 451, column 5 - line 456, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 448, column 3 - line 448, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 431, column 3 - line 431, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var $__unused = function (dictPartial1) {
                          return function ($dollar55) {
                              return $dollar55;
                          };
                      };
                      return $__unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 501, column 9 - line 518, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 498, column 5 - line 518, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var $__unused = function (dictPartial1) {
                      return function ($dollar57) {
                          return $dollar57;
                      };
                  };
                  return $__unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 530, column 5 - line 534, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar59) {
                      return $dollar59;
                  };
              };
              return $__unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 521, column 33 - line 525, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 471, column 34 - line 494, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableMap = new Data_Traversable.Traversable(function () {
      return foldableMap;
  }, function () {
      return functorMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 116, column 1 - line 116, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var findMin = (function () {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Leaf) {
                      $tco_done = true;
                      return v;
                  };
                  if (v1 instanceof Two) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value0;
                      return;
                  };
                  if (v1 instanceof Three) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value0;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 294, column 5 - line 294, column 22: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_Maybe.Nothing.value);
  })();
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 539, column 15 - line 541, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["findMin"] = findMin;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldableUnordered"] = toUnfoldableUnordered;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["size"] = size;
  exports["showMap"] = showMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["traversableMap"] = traversableMap;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var size = function (v) {
      return Data_Map_Internal.size(v);
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var showSet = function (dictShow) {
      return new Data_Show.Show(function (s) {
          return "(fromFoldable " + (Data_Show.show(Data_List_Types.showList(dictShow))(toList(s)) + ")");
      });
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function ($65) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(toList($65));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($66) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x)(toList($66));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($67) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x)(toList($67));
          };
      };
  });
  var findMin = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return v1.key;
      })(Data_Map_Internal.findMin(v));
  }; 
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldl(foldableSet)(function (m) {
              return function (a) {
                  return insert(dictOrd)(f(a))(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  var difference = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["map"] = map;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["findMin"] = findMin;
  exports["difference"] = difference;
  exports["showSet"] = showSet;
  exports["foldableSet"] = foldableSet;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
    "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
    "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodeUnits"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["toChar"] = toChar;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];
  exports["split"] = $foreign.split;
  exports["toUpper"] = $foreign.toUpper;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodePoints"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign._unsafeCodePointAt0(unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign._toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = function ($53) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($53));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                       
  var singleton = $foreign._singleton(singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign._take(takeFallback);
  var splitAt = function (i) {
      return function (s) {
          var before = take(i)(s);
          return {
              before: before,
              after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
          };
      };
  }; 
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["splitAt"] = splitAt;
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: true
  });
  var sticky = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: true,
      unicode: false
  });
  var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new RegexFlags({
              global: v.value0.global || v1.value0.global,
              ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
              multiline: v.value0.multiline || v1.value0.multiline,
              sticky: v.value0.sticky || v1.value0.sticky,
              unicode: v.value0.unicode || v1.value0.unicode
          });
      };
  });
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var multiline = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: true,
      sticky: false,
      unicode: false
  });         
  var ignoreCase = new RegexFlags({
      global: false,
      ignoreCase: true,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
  exports["global"] = global;
  exports["ignoreCase"] = ignoreCase;
  exports["multiline"] = multiline;
  exports["sticky"] = sticky;
  exports["unicode"] = unicode;
  exports["semigroupRegexFlags"] = semigroupRegexFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                                                    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["match"] = match;
  exports["replace"] = $foreign.replace;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Cont = PS["Control.Monad.Cont"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader = PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer = PS["Control.Monad.Writer"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var ProgramError = (function () {
      function ProgramError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ProgramError.create = function (value0) {
          return function (value1) {
              return new ProgramError(value0, value1);
          };
      };
      return ProgramError;
  })();
  var ProgramResult = (function () {
      function ProgramResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ProgramResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ProgramResult(value0, value1, value2);
              };
          };
      };
      return ProgramResult;
  })();
  var splitLines = Data_String_Common.split("\x0a");
  var splitChars = Data_String_Common.split("");
  var runProgram = function (p) {
      return function (r) {
          return function (s) {
              var es = Control_Monad_State_Trans.runStateT(p)(s);
              var ws = Control_Monad_Except_Trans.runExceptT(es);
              var rs = Control_Monad_Writer_Trans.runWriterT(ws);
              var res = Control_Monad_Reader_Trans.runReaderT(rs)(r);
              var v = Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(res);
              if (v.value0 instanceof Data_Either.Left) {
                  return new ProgramError(v.value1, v.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Right) {
                  return new ProgramResult(v.value0.value0.value1, v.value1, v.value0.value0.value0);
              };
              throw new Error("Failed pattern match at Util line 63, column 3 - line 65, column 60: " + [ v.constructor.name ]);
          };
      };
  };
  var maxValue$prime = function (dictOrd) {
      return function (a) {
          var gt = function (accM) {
              return function (v) {
                  return Data_Maybe.Just.create((function () {
                      if (accM instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (accM instanceof Data_Maybe.Just) {
                          var $17 = Data_Ord.greaterThan(dictOrd)(accM.value0.value1)(v.value1);
                          if ($17) {
                              return accM.value0;
                          };
                          return v;
                      };
                      throw new Error("Failed pattern match at Util line 41, column 39 - line 43, column 60: " + [ accM.constructor.name ]);
                  })());
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(gt)(Data_Maybe.Nothing.value)(a);
      };
  };
  var makePoint = function (x) {
      return function (y) {
          return {
              x: x,
              y: y
          };
      };
  };
  var log$prime = function (dictMonadTell) {
      return function ($23) {
          return Control_Monad_Writer_Class.tell(dictMonadTell)(Data_List.singleton($23));
      };
  };
  var except$prime = function (msg) {
      return function (a) {
          return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Control_Monad_Except_Trans.except(Control_Monad_Writer_Trans.applicativeWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity)))(Data_Either.note([ msg ])(a)));
      };
  };
  exports["splitLines"] = splitLines;
  exports["splitChars"] = splitChars;
  exports["makePoint"] = makePoint;
  exports["maxValue'"] = maxValue$prime;
  exports["ProgramError"] = ProgramError;
  exports["ProgramResult"] = ProgramResult;
  exports["runProgram"] = runProgram;
  exports["log'"] = log$prime;
  exports["except'"] = except$prime;
})(PS["Util"] = PS["Util"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var toOp = function (input) {
      var v = Data_String_CodePoints.splitAt(1)(input);
      var afterInt = Data_Int.fromString(v.after);
      if (afterInt instanceof Data_Maybe.Nothing) {
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "invalid int: " + v.after ]);
      };
      if (afterInt instanceof Data_Maybe.Just) {
          if (v.before === "-") {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Function.flip(Data_Ring.sub(Data_Ring.ringInt))(afterInt.value0));
          };
          if (v.before === "+") {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Semiring.add(Data_Semiring.semiringInt)(afterInt.value0));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "invalid operation: " + v.before ]);
      };
      throw new Error("Failed pattern match at Day1 line 24, column 5 - line 29, column 54: " + [ afterInt.constructor.name ]);
  };
  var opAndCheck = function (acc) {
      return function (op) {
          if (acc.result instanceof Data_Maybe.Just) {
              return acc;
          };
          if (acc.result instanceof Data_Maybe.Nothing) {
              var sum = op(acc.sum);
              var v = Data_Set.member(Data_Ord.ordInt)(sum)(acc.prev);
              if (v) {
                  return {
                      sum: acc.sum,
                      prev: acc.prev,
                      result: new Data_Maybe.Just(sum)
                  };
              };
              return {
                  sum: sum,
                  prev: Data_Set.insert(Data_Ord.ordInt)(sum)(acc.prev),
                  result: acc.result
              };
          };
          throw new Error("Failed pattern match at Day1 line 38, column 21 - line 44, column 67: " + [ acc.result.constructor.name ]);
      };
  };
  var foldOps2 = function (acc) {
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(opAndCheck)(acc);
  };
  var solve2 = function ($copy_acc) {
      return function ($copy_ops) {
          var $tco_var_acc = $copy_acc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(acc, ops) {
              var res = foldOps2(acc)(ops);
              if (res.result instanceof Data_Maybe.Just) {
                  $tco_done = true;
                  return res.result.value0;
              };
              if (res.result instanceof Data_Maybe.Nothing) {
                  $tco_var_acc = res;
                  $copy_ops = ops;
                  return;
              };
              throw new Error("Failed pattern match at Day1 line 52, column 5 - line 54, column 35: " + [ res.result.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_ops);
          };
          return $tco_result;
      };
  };
  var part2 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Day 1 Part 2 started"))(function () {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(toOp)(Data_String_Common.split("\x0a")(v)))(function (v1) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Show.showInt)(solve2({
                  sum: 0,
                  prev: Data_Set.singleton(0),
                  result: Data_Maybe.Nothing.value
              })(v1)));
          });
      });
  });
  var foldOps = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
      return function (op) {
          return op(acc);
      };
  })(0);
  var solve = function (input) {
      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity)))))(foldOps)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(toOp)(Data_String_Common.split("\x0a")(input)));
  };
  var part1 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Day 1 Part 1 started"))(function () {
          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity)))))(Data_Show.show(Data_Show.showInt))(solve(v));
      });
  });
  exports["toOp"] = toOp;
  exports["foldOps"] = foldOps;
  exports["solve"] = solve;
  exports["opAndCheck"] = opAndCheck;
  exports["foldOps2"] = foldOps2;
  exports["solve2"] = solve2;
  exports["part1"] = part1;
  exports["part2"] = part2;
})(PS["Day1"] = PS["Day1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var letters = Data_String_Common.split("");
  var hasN = function (n) {
      return function (input) {
          var updateLetterCount = function (cur) {
              if (cur instanceof Data_Maybe.Just) {
                  return Data_Maybe.Just.create(cur.value0 + 1 | 0);
              };
              if (cur instanceof Data_Maybe.Nothing) {
                  return new Data_Maybe.Just(1);
              };
              throw new Error("Failed pattern match at Day2 line 29, column 33 - line 33, column 1: " + [ cur.constructor.name ]);
          };
          var updateCount = function (acc) {
              return function (cur) {
                  return Data_Map_Internal.alter(Data_Ord.ordString)(updateLetterCount)(cur)(acc);
              };
          };
          var res = Data_Foldable.foldl(Data_Foldable.foldableArray)(updateCount)(Data_Map_Internal.empty)(letters(input));
          return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_List["null"])(Data_List.filter(Data_Eq.eq(Data_Eq.eqInt)(n))(Data_Map_Internal.values(res)));
      };
  };
  var getValidBoxes = function (input) {
      var words = Util.splitLines(input);
      var twos = Data_Array.filter(hasN(2))(words);
      var threes = Data_Array.filter(hasN(3))(words);
      return Data_Array.concat([ twos, threes ]);
  };
  var getSum = function (input) {
      var words = Data_List.fromFoldable(Data_Foldable.foldableArray)(Util.splitLines(input));
      var twos = Data_List.length(Data_List.filter(hasN(2))(words));
      var threes = Data_List.length(Data_List.filter(hasN(3))(words));
      return twos * threes | 0;
  };
  var part1 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Day2 part 1 started"))(function () {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Show.showInt)(getSum(v)));
      });
  });
  var diffWords = function (s1) {
      return function (s2) {
          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(s1, s2), Data_Array.filter(function (v) {
              return !(v.value0 === v.value1);
          })(Data_Array.zip(letters(s1))(letters(s2))));
      };
  };
  var collectDiffsOfN = function ($copy_n) {
      return function ($copy_words) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, words) {
              var lengthN = function (diff) {
                  return n === Data_Array.length(Data_Tuple.snd(diff));
              };
              var v = Data_List.uncons(words);
              if (v instanceof Data_Maybe.Just) {
                  var diffs = Data_Functor.map(Data_List_Types.functorList)(diffWords(v.value0.head))(v.value0.tail);
                  var lenN = Data_List.filter(lengthN)(diffs);
                  if (lenN instanceof Data_List_Types.Nil) {
                      $tco_var_n = n;
                      $copy_words = v.value0.tail;
                      return;
                  };
                  $tco_done = true;
                  return lenN;
              };
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_List_Types.Nil.value;
              };
              throw new Error("Failed pattern match at Day2 line 53, column 5 - line 60, column 23: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_words);
          };
          return $tco_result;
      };
  };
  var part2 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Day2 part 2 started"))(function () {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_List_Types.showList(Data_Tuple.showTuple(Data_Tuple.showTuple(Data_Show.showString)(Data_Show.showString))(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(Data_Show.showString)))))(collectDiffsOfN(1)(Data_List.fromFoldable(Data_Foldable.foldableArray)(getValidBoxes(v)))));
      });
  });
  exports["letters"] = letters;
  exports["hasN"] = hasN;
  exports["getSum"] = getSum;
  exports["getValidBoxes"] = getValidBoxes;
  exports["diffWords"] = diffWords;
  exports["collectDiffsOfN"] = collectDiffsOfN;
  exports["part1"] = part1;
  exports["part2"] = part2;
})(PS["Day2"] = PS["Day2"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var parseGroups = function (groups) {
      var justOrDefault = Data_Maybe.fromMaybe(0);
      var parseIndex = function (index) {
          return justOrDefault(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(groups)(index))));
      };
      return {
          id: parseIndex(1),
          point: {
              x: parseIndex(2),
              y: parseIndex(3)
          },
          size: {
              width: parseIndex(4),
              height: parseIndex(5)
          }
      };
  };
  var getClaimPoints = function (claim) {
      var xs = Data_Array.range(claim.point.x)((claim.point.x + claim.size.width | 0) - 1 | 0);
      var ys = Data_Array.range(claim.point.y)((claim.point.y + claim.size.height | 0) - 1 | 0);
      return Data_Array.concat(Data_Functor.map(Data_Functor.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Applicative.applicativeFn)(function (v) {
          return function (v1) {
              return {
                  x: v,
                  y: v1
              };
          };
      })(xs))(ys));
  };
  var placeClaim = function (fabric) {
      return function (claim) {
          var updateY = function (y) {
              return function (list) {
                  var v = Data_Array.modifyAt(y)(Data_List_Types.Cons.create(claim))(list);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  return list;
              };
          };
          var update = function (x) {
              return function (y) {
                  return function (fabric$prime) {
                      return Data_Array.modifyAt(x)(updateY(y))(fabric$prime);
                  };
              };
          };
          var markPoint = function (fabric$prime) {
              return function (v) {
                  var v1 = update(v.x)(v.y)(fabric$prime);
                  if (v1 instanceof Data_Maybe.Just) {
                      return v1.value0;
                  };
                  return fabric$prime;
              };
          };
          var points = getClaimPoints(claim);
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(markPoint)(fabric)(points);
      };
  };
  var placeClaims = function (claims) {
      var claimMaxY = function (claim) {
          return (claim.point.y + claim.size.height | 0) - 1 | 0;
      };
      var claimMaxX = function (claim) {
          return (claim.point.x + claim.size.width | 0) - 1 | 0;
      };
      var maxX = Data_Maybe.fromMaybe(0)(Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(claimMaxX)(claims)));
      var maxY = Data_Maybe.fromMaybe(0)(Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(claimMaxY)(claims)));
      var fabric = Data_Functor.map(Data_Functor.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Applicative.applicativeFn)(function (v) {
          return function (v1) {
              return Data_List_Types.Nil.value;
          };
      })(Data_Array.range(0)(maxX)))(Data_Array.range(0)(maxY));
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(placeClaim)(fabric)(claims);
  };
  var findOverlaps = function (claims) {
      var len1 = function (list) {
          return Data_List.length(list) > 1;
      };
      return Data_Array.filter(len1)(Data_Array.concat(placeClaims(claims)));
  };
  var solve1 = function ($20) {
      return Data_Array.length(findOverlaps($20));
  };
  var solve2 = function (claims) {
      var overlaps = Data_Array.concatMap(Data_Array.fromFoldable(Data_List_Types.foldableList))(findOverlaps(claims));
      var overlapSet = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "size";
      }))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
          return "height";
      }))(Data_Ord.ordInt))))()(new Data_Symbol.IsSymbol(function () {
          return "point";
      }))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Ord.ordInt))))()(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Ord.ordInt)))(overlaps);
      return Data_Set.difference(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "size";
      }))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
          return "height";
      }))(Data_Ord.ordInt))))()(new Data_Symbol.IsSymbol(function () {
          return "point";
      }))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Ord.ordInt))))()(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Ord.ordInt)))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "size";
      }))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
          return "height";
      }))(Data_Ord.ordInt))))()(new Data_Symbol.IsSymbol(function () {
          return "point";
      }))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Ord.ordInt))))()(new Data_Symbol.IsSymbol(function () {
          return "id";
      }))(Data_Ord.ordInt)))(claims))(overlapSet);
  };
  var emptyClaim = {
      id: 0,
      point: {
          x: 0,
          y: 0
      },
      size: {
          width: 0,
          height: 0
      }
  };
  var parseClaim = function (regex) {
      return function (str) {
          var v = Data_String_Regex.match(regex)(str);
          if (v instanceof Data_Maybe.Just) {
              return parseGroups(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return emptyClaim;
          };
          throw new Error("Failed pattern match at Day3 line 44, column 5 - line 46, column 30: " + [ v.constructor.name ]);
      };
  };
  var claimRegex = Data_String_Regex.regex("#(\\d+) @ (\\d+),(\\d+): (\\d+)x(\\d+)")(Data_String_Regex_Flags.noFlags);
  var parseClaims = function (input) {
      if (claimRegex instanceof Data_Either.Right) {
          return Data_Functor.map(Data_Functor.functorArray)(parseClaim(claimRegex.value0))(Util.splitLines(input));
      };
      return [  ];
  };
  var part1 = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity)))))(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Show.show(Data_Show.showInt))(solve1))(parseClaims))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))));
  var part2 = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity)))))(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Show.show(Data_Set.showSet(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "id";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "point";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "size";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "height";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "width";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt))))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "x";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "y";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt))))(Data_Show.showInt)))))(solve2))(parseClaims))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))));
  exports["emptyClaim"] = emptyClaim;
  exports["claimRegex"] = claimRegex;
  exports["parseGroups"] = parseGroups;
  exports["parseClaim"] = parseClaim;
  exports["getClaimPoints"] = getClaimPoints;
  exports["placeClaim"] = placeClaim;
  exports["placeClaims"] = placeClaims;
  exports["findOverlaps"] = findOverlaps;
  exports["parseClaims"] = parseClaims;
  exports["solve1"] = solve1;
  exports["part1"] = part1;
  exports["solve2"] = solve2;
  exports["part2"] = part2;
})(PS["Day3"] = PS["Day3"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var Guard = function (x) {
      return x;
  };
  var Start = (function () {
      function Start(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Start.create = function (value0) {
          return function (value1) {
              return new Start(value0, value1);
          };
      };
      return Start;
  })();
  var Sleep = (function () {
      function Sleep(value0) {
          this.value0 = value0;
      };
      Sleep.create = function (value0) {
          return new Sleep(value0);
      };
      return Sleep;
  })();
  var Wake = (function () {
      function Wake(value0) {
          this.value0 = value0;
      };
      Wake.create = function (value0) {
          return new Wake(value0);
      };
      return Wake;
  })();
  var newtypeGuard = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Guard);
  var logRegex = Data_Either.hush(Data_String_Regex.regex("(\\[.*\\]) (Guard #(\\d+) begins shift|.*)")(Data_String_Regex_Flags.noFlags));
  var findSleepiestMinute = function (list) {
      var longestArr = function (a1) {
          return function (a2) {
              return Data_Ord.compare(Data_Ord.ordInt)(Data_Array_NonEmpty.length(a2))(Data_Array_NonEmpty.length(a1));
          };
      };
      var getMinutes = function ($189) {
          return Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(Data_DateTime.time($189)));
      };
      var toMinutesArr = function (v) {
          return Data_Array.range(getMinutes(v.value0))(getMinutes(v.value1));
      };
      var minutes = Data_Array.concat(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(toMinutesArr)(list)));
      var groups = Data_Array["group'"](Data_Ord.ordInt)(minutes);
      var sorted = Data_Array.sortBy(longestArr)(groups);
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(sorted))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v)(0))(function (v1) {
              return Data_Maybe.Just.create(new Data_Tuple.Tuple(v1, Data_Array_NonEmpty.length(v)));
          });
      });
  };
  var eqGuard = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var eqGuardEvent = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Start && y instanceof Start) {
              return Data_Eq.eq(Data_DateTime.eqDateTime)(x.value0)(y.value0) && Data_Eq.eq(eqGuard)(x.value1)(y.value1);
          };
          if (x instanceof Sleep && y instanceof Sleep) {
              return Data_Eq.eq(Data_DateTime.eqDateTime)(x.value0)(y.value0);
          };
          if (x instanceof Wake && y instanceof Wake) {
              return Data_Eq.eq(Data_DateTime.eqDateTime)(x.value0)(y.value0);
          };
          return false;
      };
  });
  var ordGuardEvent = new Data_Ord.Ord(function () {
      return eqGuardEvent;
  }, function (v) {
      return function (v1) {
          if (v instanceof Start && v1 instanceof Start) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Start && v1 instanceof Sleep) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Start && v1 instanceof Wake) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Sleep && v1 instanceof Start) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Sleep && v1 instanceof Sleep) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Sleep && v1 instanceof Wake) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Wake && v1 instanceof Start) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Wake && v1 instanceof Sleep) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          if (v instanceof Wake && v1 instanceof Wake) {
              return Data_Ord.compare(Data_DateTime.ordDateTime)(v.value0)(v1.value0);
          };
          throw new Error("Failed pattern match at Day4 line 45, column 1 - line 45, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordGuard = new Data_Ord.Ord(function () {
      return eqGuard;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var updateSleepTime = function (acc) {
      return function (t2) {
          var updateTime = function (t1) {
              return function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(Data_DateTime.diff(Data_Time_Duration.durationMinutes)(t2)(t1));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Data_DateTime.diff(Data_Time_Duration.durationMinutes)(t2)(t1);
                      return new Data_Maybe.Just(v.value0 + v1);
                  };
                  throw new Error("Failed pattern match at Day4 line 128, column 27 - line 131, column 60: " + [ v.constructor.name ]);
              };
          };
          var updateRange = function (t1) {
              return function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Just.create(Data_List.singleton(new Data_Tuple.Tuple(t1, t2)));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Maybe.Just.create(new Data_List_Types.Cons(new Data_Tuple.Tuple(t1, t2), v.value0));
                  };
                  throw new Error("Failed pattern match at Day4 line 132, column 28 - line 134, column 56: " + [ v.constructor.name ]);
              };
          };
          if (acc.currentGuard instanceof Data_Maybe.Just) {
              if (acc.currentSleep instanceof Data_Maybe.Just) {
                  var guardTimes = Data_Map_Internal.alter(ordGuard)(updateTime(acc.currentSleep.value0))(acc.currentGuard.value0)(acc.guardTimes);
                  var guardRanges = Data_Map_Internal.alter(ordGuard)(updateRange(acc.currentSleep.value0))(acc.currentGuard.value0)(acc.guardRanges);
                  return {
                      currentGuard: acc.currentGuard,
                      currentSleep: acc.currentSleep,
                      guardTimes: guardTimes,
                      guardRanges: guardRanges
                  };
              };
              if (acc.currentSleep instanceof Data_Maybe.Nothing) {
                  return acc;
              };
              throw new Error("Failed pattern match at Day4 line 120, column 19 - line 125, column 27: " + [ acc.currentSleep.constructor.name ]);
          };
          if (acc.currentGuard instanceof Data_Maybe.Nothing) {
              return acc;
          };
          throw new Error("Failed pattern match at Day4 line 119, column 5 - line 126, column 23: " + [ acc.currentGuard.constructor.name ]);
      };
  };
  var handleEvent = function (acc) {
      return function (evt) {
          if (evt instanceof Start) {
              return {
                  currentGuard: new Data_Maybe.Just(evt.value1),
                  currentSleep: acc.currentSleep,
                  guardTimes: acc.guardTimes,
                  guardRanges: acc.guardRanges
              };
          };
          if (evt instanceof Sleep) {
              if (acc.currentGuard instanceof Data_Maybe.Just) {
                  return {
                      currentGuard: acc.currentGuard,
                      currentSleep: new Data_Maybe.Just(evt.value0),
                      guardTimes: acc.guardTimes,
                      guardRanges: acc.guardRanges
                  };
              };
              if (acc.currentGuard instanceof Data_Maybe.Nothing) {
                  return acc;
              };
              throw new Error("Failed pattern match at Day4 line 140, column 20 - line 142, column 27: " + [ acc.currentGuard.constructor.name ]);
          };
          if (evt instanceof Wake) {
              if (acc.currentGuard instanceof Data_Maybe.Just) {
                  return updateSleepTime(acc)(evt.value0);
              };
              if (acc.currentGuard instanceof Data_Maybe.Nothing) {
                  return acc;
              };
              throw new Error("Failed pattern match at Day4 line 143, column 19 - line 146, column 27: " + [ acc.currentGuard.constructor.name ]);
          };
          throw new Error("Failed pattern match at Day4 line 138, column 5 - line 146, column 27: " + [ evt.constructor.name ]);
      };
  };
  var dateRegex = Data_Either.hush(Data_String_Regex.regex("\\[(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2})\\]")(Data_String_Regex_Flags.noFlags));
  var createDate = function (matches) {
      var getMatchAsInt = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(function ($190) {
          return Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(matches)($190));
      });
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear))(getMatchAsInt(1)))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth))(getMatchAsInt(2)))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay))(getMatchAsInt(3)))(function (v2) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour))(getMatchAsInt(4)))(function (v3) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute))(getMatchAsInt(5)))(function (v4) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(0))(function (v5) {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(0))(function (v6) {
                                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Date.exactDate(v)(v1)(v2))(function (v7) {
                                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_DateTime.DateTime(v7, new Data_Time.Time(v3, v4, v5, v6)));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var parseDate = function (dateStr) {
      if (dateRegex instanceof Data_Maybe.Just) {
          var v = Data_String_Regex.match(dateRegex.value0)(dateStr);
          if (v instanceof Data_Maybe.Just) {
              return createDate(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Day4 line 88, column 21 - line 90, column 27: " + [ v.constructor.name ]);
      };
      if (dateRegex instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Day4 line 87, column 21 - line 91, column 23: " + [ dateRegex.constructor.name ]);
  };
  var createEvent = function (matches) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseDate)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(matches)(1)))))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(matches)(2))(function (v1) {
              if (v1 instanceof Data_Maybe.Just && v1.value0 === "falls asleep") {
                  return Data_Maybe.Just.create(new Sleep(v));
              };
              if (v1 instanceof Data_Maybe.Just && v1.value0 === "wakes up") {
                  return Data_Maybe.Just.create(new Wake(v));
              };
              if (v1 instanceof Data_Maybe.Just) {
                  var v2 = Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(matches)(3));
                  if (v2 instanceof Data_Maybe.Just) {
                      var v3 = Data_Int.fromString(v2.value0);
                      if (v3 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(new Start(v, v3.value0));
                      };
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Day4 line 101, column 25 - line 103, column 35: " + [ v3.constructor.name ]);
                  };
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Day4 line 100, column 19 - line 104, column 31: " + [ v2.constructor.name ]);
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Day4 line 97, column 5 - line 105, column 27: " + [ v1.constructor.name ]);
          });
      });
  };
  var parseLog = function (logStr) {
      if (logRegex instanceof Data_Maybe.Just) {
          var v = Data_String_Regex.match(logRegex.value0)(logStr);
          if (v instanceof Data_Maybe.Just) {
              return createEvent(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Day4 line 109, column 21 - line 111, column 27: " + [ v.constructor.name ]);
      };
      if (logRegex instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Day4 line 108, column 19 - line 112, column 23: " + [ logRegex.constructor.name ]);
  };
  var parseEvents = function (input) {
      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(parseLog)(Util.splitLines(input));
  };
  var generateData = function (input) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.sort(ordGuardEvent))(parseEvents(input)))(function (v) {
          var acc = {
              currentGuard: Data_Maybe.Nothing.value,
              currentSleep: Data_Maybe.Nothing.value,
              guardTimes: Data_Map_Internal.empty,
              guardRanges: Data_Map_Internal.empty
          };
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Foldable.foldl(Data_Foldable.foldableArray)(handleEvent)(acc)(v));
      });
  };
  var findSleepiestGuard = function (input) {
      var orderPairs = function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_Ord.ordNumber)(v1.value1)(v.value1);
          };
      };
      return Control_Bind.bind(Data_Maybe.bindMaybe)(generateData(input))(function (v) {
          var pairs = Data_Map_Internal.toUnfoldableUnordered(Data_Unfoldable.unfoldableArray)(v.guardTimes);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Array.head(Data_Array.sortBy(orderPairs)(pairs))))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(ordGuard)(v1)(v.guardRanges))(function (v2) {
                  return Data_Maybe.Just.create(new Data_Tuple.Tuple(v1, v2));
              });
          });
      });
  };
  var solve1 = function (input) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(findSleepiestGuard(input))(function (v) {
          var guard = Data_Tuple.fst(v);
          var times = Data_Tuple.snd(v);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(findSleepiestMinute(times))(function (v1) {
              return Data_Maybe.Just.create(Data_Newtype.unwrap(newtypeGuard)(guard) * Data_Tuple.fst(v1) | 0);
          });
      });
  };
  var part1 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var v1 = solve1(v);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Show.showInt)(v1.value0));
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no result" ]);
      };
      throw new Error("Failed pattern match at Day4 line 203, column 3 - line 205, column 40: " + [ v1.constructor.name ]);
  });
  var solve2 = function (input) {
      var mostTimes = function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_Ord.ordInt)(v1.value1.value1)(v.value1.value1);
          };
      };
      return Control_Bind.bind(Data_Maybe.bindMaybe)(generateData(input))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(findSleepiestMinute)(v.guardRanges))(function (v1) {
              var pairs = Data_Map_Internal.toUnfoldableUnordered(Data_Unfoldable.unfoldableArray)(v1);
              var sorted = Data_Array.sortBy(mostTimes)(pairs);
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(sorted))(function (v2) {
                  var guard = Data_Tuple.fst(v2);
                  var minute = Data_Tuple.fst(Data_Tuple.snd(v2));
                  return Data_Maybe.Just.create(Data_Newtype.unwrap(newtypeGuard)(guard) * minute | 0);
              });
          });
      });
  };
  var part2 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var v1 = solve2(v);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Show.showInt)(v1.value0));
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no result" ]);
      };
      throw new Error("Failed pattern match at Day4 line 210, column 3 - line 212, column 39: " + [ v1.constructor.name ]);
  });
  exports["Guard"] = Guard;
  exports["Start"] = Start;
  exports["Sleep"] = Sleep;
  exports["Wake"] = Wake;
  exports["dateRegex"] = dateRegex;
  exports["logRegex"] = logRegex;
  exports["createDate"] = createDate;
  exports["parseDate"] = parseDate;
  exports["createEvent"] = createEvent;
  exports["parseLog"] = parseLog;
  exports["parseEvents"] = parseEvents;
  exports["updateSleepTime"] = updateSleepTime;
  exports["handleEvent"] = handleEvent;
  exports["generateData"] = generateData;
  exports["findSleepiestGuard"] = findSleepiestGuard;
  exports["findSleepiestMinute"] = findSleepiestMinute;
  exports["solve1"] = solve1;
  exports["solve2"] = solve2;
  exports["part1"] = part1;
  exports["part2"] = part2;
  exports["eqGuard"] = eqGuard;
  exports["ordGuard"] = ordGuard;
  exports["newtypeGuard"] = newtypeGuard;
  exports["eqGuardEvent"] = eqGuardEvent;
  exports["ordGuardEvent"] = ordGuardEvent;
})(PS["Day4"] = PS["Day4"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];
  var plength = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.length);
  var pjoin = function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v1.value0);
          };
          if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.concat([ v.value0, v1.value0 ]));
          };
          throw new Error("Failed pattern match at Day5 line 52, column 1 - line 52, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var makePolymer = function (input) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Util.splitChars)(Data_Array.index(Util.splitLines(input))(0));
  };
  var letters = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
  var extract = function (pos) {
      return function (polymer) {
          var v = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Ring.sub(Data_Ring.ringInt))(plength(polymer)))(new Data_Maybe.Just(pos));
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just && v.value0 === 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just && v.value0 === 1) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just && v.value0 === 2) {
              return Data_Maybe.Nothing.value;
          };
          if (polymer instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (polymer instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(polymer.value0)(pos))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(polymer.value0)(pos + 1 | 0))(function (v2) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(v1, v2));
                  });
              });
          };
          throw new Error("Failed pattern match at Day5 line 38, column 10 - line 43, column 31: " + [ polymer.constructor.name ]);
      };
  };
  var dropAll = function (letter) {
      return function (string) {
          var v = Data_String_Regex.regex(letter + "+")(Data_Semigroup.append(Data_String_Regex_Flags.semigroupRegexFlags)(Data_String_Regex_Flags.global)(Data_String_Regex_Flags.ignoreCase));
          if (v instanceof Data_Either.Right) {
              return Data_String_Regex.replace(v.value0)("")(string);
          };
          if (v instanceof Data_Either.Left) {
              return string;
          };
          throw new Error("Failed pattern match at Day5 line 83, column 5 - line 85, column 25: " + [ v.constructor.name ]);
      };
  };
  var deleteAt = function (idx1) {
      return function (idx2) {
          return function (p) {
              var first = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.take(idx1))(p);
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Ring.sub(Data_Ring.ringInt))(plength(p)))(new Data_Maybe.Just(idx2 + 1 | 0)))(function (v) {
                  var last = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.takeEnd(v))(p);
                  return pjoin(first)(last);
              });
          };
      };
  };
  var canDrop = function (u1) {
      return function (u2) {
          return !(u1 === u2) && (Data_String_Common.toUpper(u1) === u2 || Data_String_Common.toUpper(u2) === u1);
      };
  };
  var condense = function ($copy_pos) {
      return function ($copy_polymer) {
          var $tco_var_pos = $copy_pos;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(pos, polymer) {
              var v = extract(pos)(polymer);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return polymer;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = canDrop(v.value0.value0)(v.value0.value1);
                  if (v1) {
                      $tco_var_pos = Data_Ord.max(Data_Ord.ordInt)(pos - 1 | 0)(0);
                      $copy_polymer = deleteAt(pos)(pos + 1 | 0)(polymer);
                      return;
                  };
                  if (!v1) {
                      $tco_var_pos = pos + 1 | 0;
                      $copy_polymer = polymer;
                      return;
                  };
                  throw new Error("Failed pattern match at Day5 line 74, column 27 - line 76, column 42: " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Day5 line 72, column 24 - line 76, column 42: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_pos, $copy_polymer);
          };
          return $tco_result;
      };
  };
  var solve1 = function ($45) {
      return plength(condense(0)(makePolymer($45)));
  };
  var part1 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var v1 = solve1(v);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Show.showInt)(v1.value0));
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no result" ]);
      };
      throw new Error("Failed pattern match at Day5 line 90, column 3 - line 92, column 40: " + [ v1.constructor.name ]);
  });
  var solve2 = function (letter) {
      return function (input) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Solving for " + letter))(function () {
              var res = solve1(dropAll(letter)(input));
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(res)))(function () {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(res);
              });
          });
      };
  };
  var part2 = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Calculating stage1s"))(function () {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Function.flip(solve2)(v))(letters))(function (v1) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Show.show(Data_Maybe.showMaybe(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorFn)(Data_Array.head)(Data_Array.sort(Data_Ord.ordInt)))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(v1))));
          });
      });
  });
  exports["makePolymer"] = makePolymer;
  exports["plength"] = plength;
  exports["extract"] = extract;
  exports["canDrop"] = canDrop;
  exports["pjoin"] = pjoin;
  exports["deleteAt"] = deleteAt;
  exports["condense"] = condense;
  exports["solve1"] = solve1;
  exports["dropAll"] = dropAll;
  exports["part1"] = part1;
  exports["letters"] = letters;
  exports["solve2"] = solve2;
  exports["part2"] = part2;
})(PS["Day5"] = PS["Day5"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var Distance = function (x) {
      return x;
  };
  var newtypeDistance = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Distance);
  var makePoint = function (pattern) {
      return function (line) {
          var v = Data_String_Regex.match(pattern)(line);
          if (v instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Int.fromString)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v.value0)(1)))))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Int.fromString)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v.value0)(2)))))(function (v2) {
                      return new Data_Maybe.Just({
                          x: v1,
                          y: v2
                      });
                  });
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Day6 line 33, column 26 - line 38, column 21: " + [ v.constructor.name ]);
      };
  };
  var parsePoints = function (input) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.hush(Data_String_Regex.regex("(\\d+), (\\d+)")(Data_String_Regex_Flags.noFlags)))(function (v) {
          return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(makePoint(v))(Util.splitLines(input));
      });
  };
  var getPoint = function (v) {
      return v.value0;
  };
  var findInfinite = function (points) {
      return function (area) {
          var maxY = (area.point.y + area.size.height | 0) - 1 | 0;
          var maxX = (area.point.x + area.size.width | 0) - 1 | 0;
          var findEdge = function (acc) {
              return function (v) {
                  var $38 = v.value0.x === area.point.x || (v.value0.x === maxX || (v.value0.y === area.point.y || v.value0.y === maxY));
                  if ($38) {
                      return Data_Set.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                          return "y";
                      }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
                          return "x";
                      }))(Data_Ord.ordInt)))(v.value1)(acc);
                  };
                  return acc;
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(findEdge)(Data_Set.empty)(points);
      };
  };
  var eqDistance = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Tuple.eqTuple(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))(Data_Eq.eqInt)))(Data_Eq.eqInt))(x)(y);
      };
  });
  var ordDistance = new Data_Ord.Ord(function () {
      return eqDistance;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v.value1)(v1.value1);
      };
  });
  var distance = function (p1) {
      return function (p2) {
          return Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(p1.x - p2.x | 0) + Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(p1.y - p2.y | 0) | 0;
      };
  };
  var distanceTuple = function (p1) {
      return function (p2) {
          return new Data_Tuple.Tuple(p2, distance(p1)(p2));
      };
  };
  var getDistances = function (point) {
      return Data_Functor.map(Data_Functor.functorArray)(distanceTuple(point));
  };
  var getClosestPoint = function (point) {
      return function (points) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(distanceTuple(point))(Data_Array.head(points)))(function (v) {
              var distances = getDistances(point)(points);
              var shortest = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Ord.min(ordDistance))(v)(distances);
              var shortestLen = Data_Tuple.snd(Data_Newtype.unwrap(newtypeDistance)(shortest));
              var allShortest = Data_Array.filter(function (v1) {
                  return v1.value1 === shortestLen;
              })(distances);
              var v1 = Data_Array.length(allShortest);
              if (v1 === 1) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Tuple.Tuple.create(point)(getPoint(shortest)));
              };
              return Data_Maybe.Nothing.value;
          });
      };
  };
  var calcArea = function (points) {
      var minX = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Ord.min(Data_Ord.ordInt))(100)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.x;
      })(points));
      var minY = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Ord.min(Data_Ord.ordInt))(100)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.y;
      })(points));
      var maxX = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Ord.max(Data_Ord.ordInt))(0)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.x;
      })(points));
      var maxY = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Ord.max(Data_Ord.ordInt))(0)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.y;
      })(points));
      return {
          point: {
              x: minX,
              y: minY
          },
          size: {
              width: (maxX - minY | 0) + 1 | 0,
              height: (maxY - minY | 0) + 1 | 0
          }
      };
  };
  var allPointsInArea = function (area) {
      var ys = Data_Array.range(area.point.y)(area.point.y + area.size.height | 0);
      var xs = Data_Array.range(area.point.x)(area.point.x + area.size.width | 0);
      return Data_Functor.map(Data_Functor.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Applicative.applicativeFn)(Util.makePoint)(xs))(ys);
  };
  var solve1 = function (input) {
      var incCount = function (value) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
              if (value instanceof Data_Maybe.Nothing) {
                  return 1;
              };
              if (value instanceof Data_Maybe.Just) {
                  return value.value0 + 1 | 0;
              };
              throw new Error("Failed pattern match at Day6 line 110, column 29 - line 114, column 1: " + [ value.constructor.name ]);
          })());
      };
      var countPoints = function (acc) {
          return function (v) {
              return Data_Map_Internal.alter(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                  return "y";
              }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
                  return "x";
              }))(Data_Ord.ordInt)))(incCount)(v.value1)(acc);
          };
      };
      return Control_Bind.bind(Data_Maybe.bindMaybe)(parsePoints(input))(function (v) {
          var area = calcArea(v);
          var allPoints = Data_Array.concat(allPointsInArea(area));
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.filter(Data_Maybe.isJust)(Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(getClosestPoint)(v))(allPoints))))(function (v1) {
              var infPoints = findInfinite(v1)(area);
              var pointCounts = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldl(Data_Foldable.foldableArray)(countPoints)(Data_Map_Internal.empty)(v1));
              var finiteCounts = Data_Array.filter(function (v2) {
                  return !Data_Set.member(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
                      return "y";
                  }))(Data_Ord.ordInt))()(new Data_Symbol.IsSymbol(function () {
                      return "x";
                  }))(Data_Ord.ordInt)))(v2.value0)(infPoints);
              })(pointCounts);
              return Util["maxValue'"](Data_Ord.ordInt)(finiteCounts);
          });
      });
  };
  var part1 = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity)))))(Data_Functor.map(Data_Functor.functorFn)(Data_Show.show(Data_Maybe.showMaybe(Data_Tuple.showTuple(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "x";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "y";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt)))(Data_Show.showInt))))(solve1))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))));
  var solve2 = function (input) {
      var sumLt = function (i) {
          return function (dists) {
              return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return v.value1;
              })(dists)) < i;
          };
      };
      return Control_Bind.bind(Data_Maybe.bindMaybe)(parsePoints(input))(function (v) {
          var area = calcArea(v);
          var allPoints = Data_Array.concat(allPointsInArea(area));
          var allDistances = Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(getDistances)(v))(allPoints);
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.length(Data_Array.filter(sumLt(10000))(allDistances)));
      });
  };
  var part2 = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity)))))(Data_Functor.map(Data_Functor.functorFn)(Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt)))(solve2))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))));
  exports["Distance"] = Distance;
  exports["makePoint"] = makePoint;
  exports["parsePoints"] = parsePoints;
  exports["distance"] = distance;
  exports["distanceTuple"] = distanceTuple;
  exports["getPoint"] = getPoint;
  exports["calcArea"] = calcArea;
  exports["getDistances"] = getDistances;
  exports["getClosestPoint"] = getClosestPoint;
  exports["allPointsInArea"] = allPointsInArea;
  exports["findInfinite"] = findInfinite;
  exports["solve1"] = solve1;
  exports["solve2"] = solve2;
  exports["part1"] = part1;
  exports["part2"] = part2;
  exports["eqDistance"] = eqDistance;
  exports["newtypeDistance"] = newtypeDistance;
  exports["ordDistance"] = ordDistance;
})(PS["Day6"] = PS["Day6"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var updateHeads = function (from) {
      return function (to) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
              var fromHasParent = Data_Map_Internal.member(Data_Ord.ordString)(from)(v.ins);
              var toInHeads = Data_Set.member(Data_Ord.ordString)(to)(v.heads);
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))((function () {
                  var $42 = !fromHasParent;
                  if ($42) {
                      return Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))((function () {
                          var $43 = {};
                          for (var $44 in v) {
                              if ({}.hasOwnProperty.call(v, $44)) {
                                  $43[$44] = v[$44];
                              };
                          };
                          $43.heads = Data_Set.insert(Data_Ord.ordString)(from)(v.heads);
                          return $43;
                      })());
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Unit.unit);
              })())(function () {
                  if (toInHeads) {
                      return Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))((function () {
                          var $47 = {};
                          for (var $48 in v) {
                              if ({}.hasOwnProperty.call(v, $48)) {
                                  $47[$48] = v[$48];
                              };
                          };
                          $47.heads = Data_Set["delete"](Data_Ord.ordString)(to)(v.heads);
                          return $47;
                      })());
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Unit.unit);
              });
          });
      };
  };
  var removeNode = function (state) {
      return function (node) {
          var updateHeads$prime = function (ins) {
              return function (heads) {
                  return function (child) {
                      var $50 = Data_Map_Internal.size(ins) > 0 && Data_Map_Internal.member(Data_Ord.ordString)(child)(ins);
                      if ($50) {
                          return heads;
                      };
                      return Data_Set.insert(Data_Ord.ordString)(child)(heads);
                  };
              };
          };
          var removeParent = function (v) {
              if (v instanceof Data_Maybe.Just) {
                  var newParents = Data_Set["delete"](Data_Ord.ordString)(node)(v.value0);
                  var $52 = Data_Set.size(newParents) === 0;
                  if ($52) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(newParents);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Day7 line 118, column 5 - line 120, column 68: " + [ v.constructor.name ]);
          };
          var removeParents = function (ins) {
              return function (inNode) {
                  return Data_Map_Internal.alter(Data_Ord.ordString)(removeParent)(inNode)(ins);
              };
          };
          var updatedHeads = Data_Set["delete"](Data_Ord.ordString)(node)(state.heads);
          var v = Data_Map_Internal.pop(Data_Ord.ordString)(node)(state.outs);
          if (v instanceof Data_Maybe.Just) {
              var newIns = Data_Foldable.foldl(Data_Set.foldableSet)(removeParents)(state.ins)(v.value0.value0);
              var newHeads = Data_Foldable.foldl(Data_Set.foldableSet)(updateHeads$prime(newIns))(updatedHeads)(v.value0.value0);
              return {
                  lines: state.lines,
                  outs: v.value0.value1,
                  ins: newIns,
                  heads: newHeads,
                  maxWorkers: state.maxWorkers,
                  working: state.working,
                  time: state.time
              };
          };
          if (v instanceof Data_Maybe.Nothing) {
              return {
                  lines: state.lines,
                  outs: state.outs,
                  ins: state.ins,
                  heads: updatedHeads,
                  maxWorkers: state.maxWorkers,
                  working: state.working,
                  time: state.time
              };
          };
          throw new Error("Failed pattern match at Day7 line 110, column 3 - line 115, column 46: " + [ v.constructor.name ]);
      };
  };
  var nodeTime = function (node) {
      return Data_Maybe.fromJust()(Data_Functor.map(Data_Maybe.functorMaybe)(function ($132) {
          return Data_Function.flip(Data_Ring.sub(Data_Ring.ringInt))(4)(Data_Char.toCharCode($132));
      })(Data_String_CodeUnits.toChar(node)));
  };
  var work = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var $59 = Data_Map_Internal.size(v.working) === v.maxWorkers;
      if ($59) {
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no free workers" ]);
      };
      var v1 = Data_Set.findMin(v.heads);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))((function () {
              var $61 = {};
              for (var $62 in v) {
                  if ({}.hasOwnProperty.call(v, $62)) {
                      $61[$62] = v[$62];
                  };
              };
              $61.heads = Data_Set["delete"](Data_Ord.ordString)(v1.value0)(v.heads);
              $61.working = Data_Map_Internal.insert(Data_Ord.ordInt)(v.time + nodeTime(v1.value0) | 0)(v1.value0)(v.working);
              return $61;
          })());
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "nothing to work on" ]);
      };
      throw new Error("Failed pattern match at Day7 line 150, column 10 - line 155, column 51: " + [ v1.constructor.name ]);
  });
  var initialState = function (str) {
      return {
          lines: Data_List.fromFoldable(Data_Foldable.foldableArray)(Util.splitLines(str)),
          outs: Data_Map_Internal.empty,
          ins: Data_Map_Internal.empty,
          heads: Data_Set.empty,
          maxWorkers: 5,
          working: Data_Map_Internal.empty,
          time: 0
      };
  };
  var edgeRegex = Data_Either.fromRight()(Data_String_Regex.regex("Step (.+) must be finished before step (.+) can begin\\.")(Data_String_Regex_Flags.noFlags));
  var parseLine = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var v1 = Data_List.uncons(v.lines);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["except'"]("bad match")(Data_String_Regex.match(edgeRegex)(v1.value0.head)))(function (v2) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["except'"]("no match group 1")(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v2)(1))))(function (v3) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["except'"]("no match group 2")(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v2)(2))))(function (v4) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))((function () {
                          var $74 = {};
                          for (var $75 in v) {
                              if ({}.hasOwnProperty.call(v, $75)) {
                                  $74[$75] = v[$75];
                              };
                          };
                          $74.lines = v1.value0.tail;
                          return $74;
                      })()))(function (v5) {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(new Data_Maybe.Just({
                              from: v3,
                              to: v4
                          }));
                      });
                  });
              });
          });
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Maybe.Nothing.value);
      };
      throw new Error("Failed pattern match at Day7 line 59, column 3 - line 66, column 28: " + [ v1.constructor.name ]);
  });
  var complete = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Looking for work to complete"))(function () {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
          var $82 = Data_Map_Internal.size(v.working) === 0;
          if ($82) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no work in progress" ]);
          };
          var v1 = Data_Map_Internal.findMin(v.working);
          if (v1 instanceof Data_Maybe.Just) {
              var completedState = {
                  working: Data_Map_Internal["delete"](Data_Ord.ordInt)(v1.value0.key)(v.working),
                  time: v1.value0.key,
                  heads: v.heads,
                  maxWorkers: v.maxWorkers,
                  ins: v.ins,
                  lines: v.lines,
                  outs: v.outs
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(removeNode(completedState)(v1.value0.value)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Completing " + v1.value0.value))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Time is now " + Data_Show.show(Data_Show.showInt)(v1.value0.key)))(function () {
                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value0.value);
                      });
                  });
              });
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "could not find min key" ]);
          };
          throw new Error("Failed pattern match at Day7 line 163, column 10 - line 170, column 55: " + [ v1.constructor.name ]);
      });
  });
  var buildParallel = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Looking for work"))(function () {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_List.many(Control_Monad_State_Trans.alternativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Control_Monad_Except_Trans.alternativeExceptT(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Trans.lazyStateT)(work))(function (v) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Working on " + Data_Show.show(Data_Map_Internal.showMap(Data_Show.showInt)(Data_Show.showString))(v1.working)))(function () {
                  return complete;
              });
          });
      });
  });
  var build = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("heads: " + Data_Show.show(Data_Set.showSet(Data_Show.showString))(v.heads)))(function () {
          var next = Data_Set.findMin(v.heads);
          if (next instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(removeNode(v)(next.value0)))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("choose " + next.value0))(function () {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(next.value0);
                  });
              });
          };
          if (next instanceof Data_Maybe.Nothing) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no more nodes" ]);
          };
          throw new Error("Failed pattern match at Day7 line 138, column 3 - line 143, column 44: " + [ next.constructor.name ]);
      });
  });
  var addEdge = function (from) {
      return function (to) {
          var addEdge$prime = function (node) {
              return function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Maybe.Just.create(Data_Set.insert(Data_Ord.ordString)(node)(v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Just.create(Data_Set.singleton(node));
                  };
                  throw new Error("Failed pattern match at Day7 line 76, column 5 - line 76, column 62: " + [ node.constructor.name, v.constructor.name ]);
              };
          };
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
              return Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))((function () {
                  var $102 = {};
                  for (var $103 in v) {
                      if ({}.hasOwnProperty.call(v, $103)) {
                          $102[$103] = v[$103];
                      };
                  };
                  $102.outs = Data_Map_Internal.alter(Data_Ord.ordString)(addEdge$prime(to))(from)(v.outs);
                  $102.ins = Data_Map_Internal.alter(Data_Ord.ordString)(addEdge$prime(from))(to)(v.ins);
                  return $102;
              })());
          });
      };
  };
  var parse = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(parseLine)(function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("adding edge from " + (v1.value0.from + (" to " + v1.value0.to))))(function () {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(addEdge(v1.value0.from)(v1.value0.to))(function (v2) {
                      return updateHeads(v1.value0.from)(v1.value0.to);
                  });
              });
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))([ "no more lines" ]);
          };
          throw new Error("Failed pattern match at Day7 line 100, column 3 - line 105, column 44: " + [ v1.constructor.name ]);
      });
  });
  var solve1 = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Part 1 started"))(function () {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_List.many(Control_Monad_State_Trans.alternativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Control_Monad_Except_Trans.alternativeExceptT(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Trans.lazyStateT)(parse))(function (v) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_List.many(Control_Monad_State_Trans.alternativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Control_Monad_Except_Trans.alternativeExceptT(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Trans.lazyStateT)(build))(function (v1) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("")(v1));
          });
      });
  });
  var part1 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var v1 = Util.runProgram(solve1)(v)(initialState(v));
      if (v1 instanceof Util.ProgramResult) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Writer_Class.tell(Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value1))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value2);
          });
      };
      if (v1 instanceof Util.ProgramError) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Writer_Class.tell(Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value0))(function () {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value1);
          });
      };
      throw new Error("Failed pattern match at Day7 line 191, column 3 - line 197, column 22: " + [ v1.constructor.name ]);
  });
  var solve2 = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Part 2 started"))(function () {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_List.many(Control_Monad_State_Trans.alternativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Control_Monad_Except_Trans.alternativeExceptT(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Trans.lazyStateT)(parse))(function (v) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Data_List.many(Control_Monad_State_Trans.alternativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Control_Monad_Except_Trans.alternativeExceptT(Data_Monoid.monoidArray)(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Trans.lazyStateT)(buildParallel))(function (v1) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Util["log'"](Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("Final state: " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "heads";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "ins";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "lines";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "maxWorkers";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "outs";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "time";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "working";
                  }))(Data_Show.showRecordFieldsNil)(Data_Map_Internal.showMap(Data_Show.showInt)(Data_Show.showString)))(Data_Show.showInt))(Data_Map_Internal.showMap(Data_Show.showString)(Data_Set.showSet(Data_Show.showString))))(Data_Show.showInt))(Data_List_Types.showList(Data_Show.showString)))(Data_Map_Internal.showMap(Data_Show.showString)(Data_Set.showSet(Data_Show.showString))))(Data_Set.showSet(Data_Show.showString))))(v2)))(function () {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))("steps: " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("")(v1) + ("\x0atime: " + Data_Show.show(Data_Show.showInt)(v2.time))));
                  });
              });
          });
      });
  });
  var part2 = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Reader_Class.ask(Control_Monad_State_Trans.monadAskStateT(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Writer_Trans.monadAskWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))))(function (v) {
      var v1 = Util.runProgram(solve2)(v)(initialState(v));
      if (v1 instanceof Util.ProgramResult) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Writer_Class.tell(Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value1))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value2);
          });
      };
      if (v1 instanceof Util.ProgramError) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(Control_Monad_Writer_Class.tell(Control_Monad_State_Trans.monadTellStateT(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value0))(function () {
              return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_List_Types.monoidList)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))))(v1.value1);
          });
      };
      throw new Error("Failed pattern match at Day7 line 211, column 3 - line 217, column 18: " + [ v1.constructor.name ]);
  });
  exports["initialState"] = initialState;
  exports["edgeRegex"] = edgeRegex;
  exports["parseLine"] = parseLine;
  exports["addEdge"] = addEdge;
  exports["updateHeads"] = updateHeads;
  exports["parse"] = parse;
  exports["removeNode"] = removeNode;
  exports["nodeTime"] = nodeTime;
  exports["build"] = build;
  exports["work"] = work;
  exports["complete"] = complete;
  exports["buildParallel"] = buildParallel;
  exports["solve1"] = solve1;
  exports["part1"] = part1;
  exports["solve2"] = solve2;
  exports["part2"] = part2;
})(PS["Day7"] = PS["Day7"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  exports["log"] = $foreign.log;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";

  exports.unsafeFromForeign = function (value) {
    return value;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Prelude = PS["Prelude"];
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.ready = function(func) {
      return function() {
          jQuery(document).ready(func);
      };
  };

  exports.select = function(selector) {
      return function() {
          return jQuery(selector);
      };
  };

  exports.create = function(html) {
      return function() {
          return jQuery(html);
      };
  };

  exports.setAttr = function(attr) {
      return function(val) {
          return function(ob) {
              return function() {
                  ob.attr(attr, val);
              };
          };
      };
  };

  exports.attr = function(attrs) {
      return function(ob) {
          return function() {
              ob.attr(attrs);
          };
      };
  };

  exports.append = function(ob1) {
      return function(ob) {
          return function() {
              ob.append(ob1);
          };
      };
  };

  exports.appendText = function(s) {
      return function(ob) {
          return function() {
              ob.append(document.createTextNode(s));
          };
      };
  };

  exports.setText = function(text) {
      return function(ob) {
          return function() {
              ob.text(text);
          };
      };
  };

  exports.getValue = function(ob) {
      return function() {
          return ob.val();
      };
  };

  exports.on = function(evt) {
      return function(act) {
          return function(ob) {
              return function() {
                  ob.on(evt, function(e) {
                      act(e)(jQuery(this))();
                  });
              };
          };
      };
  };
})(PS["JQuery"] = PS["JQuery"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["JQuery"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];
  exports["ready"] = $foreign.ready;
  exports["select"] = $foreign.select;
  exports["create"] = $foreign.create;
  exports["setAttr"] = $foreign.setAttr;
  exports["append"] = $foreign.append;
  exports["appendText"] = $foreign.appendText;
  exports["setText"] = $foreign.setText;
  exports["getValue"] = $foreign.getValue;
  exports["on"] = $foreign.on;
})(PS["JQuery"] = PS["JQuery"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Day1 = PS["Day1"];
  var Day2 = PS["Day2"];
  var Day3 = PS["Day3"];
  var Day4 = PS["Day4"];
  var Day5 = PS["Day5"];
  var Day6 = PS["Day6"];
  var Day7 = PS["Day7"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Foreign = PS["Foreign"];
  var JQuery = PS["JQuery"];
  var Prelude = PS["Prelude"];
  var Util = PS["Util"];                 
  var tests = [ {
      day: 1,
      part1: Day1.part1,
      part2: Day1.part2
  }, {
      day: 2,
      part1: Day2.part1,
      part2: Day2.part2
  }, {
      day: 3,
      part1: Day3.part1,
      part2: Day3.part2
  }, {
      day: 4,
      part1: Day4.part1,
      part2: Day4.part2
  }, {
      day: 5,
      part1: Day5.part1,
      part2: Day5.part2
  }, {
      day: 6,
      part1: Day6.part1,
      part2: Day6.part2
  }, {
      day: 7,
      part1: Day7.part1,
      part2: Day7.part2
  } ];
  var handleClick = function (func) {
      return function (v) {
          return function (v1) {
              return function __do() {
                  var v2 = Data_Functor.mapFlipped(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(JQuery.select("#input"))(JQuery.getValue))(Foreign.unsafeFromForeign)();
                  var v3 = JQuery.select("#results")();
                  var v4 = Util.runProgram(func)(v2)({});
                  if (v4 instanceof Util.ProgramResult) {
                      Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(Effect_Console.log)(v4.value1)();
                      return JQuery.setText(v4.value2)(v3)();
                  };
                  if (v4 instanceof Util.ProgramError) {
                      Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(Effect_Console.log)(v4.value0)();
                      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (e) {
                          return JQuery.setText("Error: " + e)(v3);
                      })(v4.value1)();
                  };
                  throw new Error("Failed pattern match at Main line 40, column 3 - line 46, column 61: " + [ v4.constructor.name ]);
              };
          };
      };
  };
  var createLink = function (name) {
      return function (func) {
          return function __do() {
              var v = JQuery.create("<a>")();
              JQuery.appendText(name)(v)();
              JQuery.setAttr("href")("#")(v)();
              JQuery.setAttr("class")("test-link")(v)();
              JQuery.on("click")(handleClick(func))(v)();
              return v;
          };
      };
  };
  var renderTestLinks = function (day) {
      return function __do() {
          var v = JQuery.select("#tests")();
          var dayText = "Day" + (Data_Show.show(Data_Show.showInt)(day.day) + " - ");
          var v1 = createLink("[Part 1]")(day.part1)();
          var v2 = createLink("[Part 2]")(day.part2)();
          var v3 = JQuery.create("<br>")();
          JQuery.appendText(dayText)(v)();
          JQuery.append(v1)(v)();
          JQuery.append(v2)(v)();
          return JQuery.append(v3)(v)();
      };
  };
  var main = JQuery.ready(function __do() {
      Effect_Console.log("Loading app")();
      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(renderTestLinks)(tests)();
  });
  exports["tests"] = tests;
  exports["handleClick"] = handleClick;
  exports["createLink"] = createLink;
  exports["renderTestLinks"] = renderTestLinks;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();